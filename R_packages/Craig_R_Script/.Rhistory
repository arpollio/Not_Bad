#two groups symbiont free living
life <- factor(x=Lifestyle)
life
#plot densities
sm.density.compare(life, model = equal)
#plot densities
sm.density.compare(factor(x=Lifestyle), model = equal)
#two groups symbiont free living
life <- factor(x=Lifestyle, c(levels(x)))
#two groups symbiont free living
life <- factor(x=Lifestyle, c(levels(Symbion)))
#two groups symbiont free living
life <- factor(x=Lifestyle, c(levels(Symbiont)))
#two groups symbiont free living
life <- factor(x=Lifestyle, c(levels("Symbiont")))
life
#two groups symbiont free living
life <- factor(x=Lifestyle)
labels(life, "Endosymbiont", "Free living")
life
labels(life, "Symbiont", "Free living")
life
#two groups symbiont free living
life <- factor(x=Organisms$Lifestyle)
life
#two groups symbiont free living
life <- factor(x=Organisms$Lifestyle, c("Free-Living", "Symbiont"))
life
#plot densities
sm.density.compare(life, model = equal)
#plot densities
sm.density.compare(total, life, model = equal)
#plot densities
sm.density.compare(total)
labels(life, Symbiont, Free-living)
labels(life, Symbiont, Free-Living)
#two groups symbiont free living
life <- factor(x=Organisms$Lifestyle, c(Free-Living, Symbiont))
life
#two groups symbiont free living
life <- factor(x=Organisms$Lifestyle, levels = c(Free-Living, Symbiont))
#two groups symbiont free living
life <- factor(x=Organisms$Lifestyle, levels = c("Free-Living", Symbiont))
#two groups symbiont free living
life <- factor(x=Organisms$Lifestyle, levels = c("Free-Living", "Symbiont"))
life
#two groups symbiont free living
life <- factor(x=Organisms$Lifestyle, levels(Organisms$Lifestyle))
life
levels
#two groups symbiont free living
life <- factor(x=Organisms$Lifestyle)
life
#plot densities
sm.density.compare(life, Organisms$total.genes.present)
#plot densities
sm.density.compare(life, Organisms$total.genes.present, model = equal)
#plot densities
sm.density.compare(life, Organisms$total.genes.present, model = "equal")
#plot densities
sm.density.compare(Organisms$Lifestyle, Organisms$total.genes.present, model = "equal")
life
total
Organisms$total.genes.present
#plot densities
sm.density.compare(Organisms$total.genes.present, life, model = "equal")
#plot densities
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella genes present" )
legend(locator(1), levels(life)
legend(locator(1), levels(life))
legend(life)
legend(locator(1), levels(life), fill=NULL)
legend(levels(life), fill=NULL)
legend(locator(40) levels(life), fill=NULL)
legend(locator(40), levels(life), fill=NULL)
legend(locator(40,0), levels(life), fill=NULL)
legend(locator(40,0), levels(life), fill=NULL)
legend(locator(3), levels(life), fill=NULL)
colfill <- c(2: (2+length(levels(life))))
legend(locator(3), levels(life), fill=colfill)
legend(locator(1)), levels(life), fill=colfill)
legend(locator(1), levels(life), fill=colfill)
legend(levels(life), fill=colfill)
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend(levels(life), fill=colfill)
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend(levels(life), fill=colfill))
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend(levels(life), fill=colfill))
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend(locator(1), levels(life), fill=colfill))
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend("top", levels(life), fill=colfill))
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend("top", levels(life), fill=colfill))
#plot densities
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present" )
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend("top", levels(life), fill=colfill))
#plot densities
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present" )
colfill <- c(2: (2+length(levels(life))))
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend("top", levels(life), fill=colfill))
install.packages("sm")
Organisms <- read.csv("D:/New folder/desktop/Endosymbiont Fasta files/Data_for_distribution.csv", row.names=1)
#compare number of flagella genes between symbionts and freeliving organisms
attach(Organisms)
#two groups symbiont free living
life <- factor(x=Organisms$Lifestyle)
Organisms$total.genes.present
#plot densities
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present" )
colfill <- c(2: (2+length(levels(life))))
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend("top", levels(life), fill=colfill))
install.packages("sm")
#plot densities
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present" )
library("sm")
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend("top", levels(life), fill=colfill))
#plot densities
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present" )
colfill <- c(2: (2+length(levels(life))))
sm.density.compare(Organisms$total.genes.present, life, xlab = "Flagella Genes Present", legend("top", levels(life), fill=colfill))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library("ggplot2")
Organisms <- read.csv("D:/New folder/desktop/Endosymbiont Fasta files/Data_for_distribution.csv", row.names=1)
life <- factor(x=Organisms$Lifestyle)
Plot <- ggplot(life, aes(x = Organisms$total.genes.present))+geom_density()
Plot <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) + geom_density()
Plot
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) + geom_density()
Overall_gene_density
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present), xlab = "Total Genes Present") + geom_density()
Overall_gene_density
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present), xlab("Total Genes Present")) + geom_density()
Overall_gene_density
Overall_gene_density
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present, xlab("Total Genes Present")) + geom_density()
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present, xlab("Total Genes Present"))) + geom_density()
Overall_gene_density
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) + xlab("Total Genes Present") + geom_density()
Overall_gene_density
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) + xlab("Total Genes Present") + geom_density() + ylab("Kernal Density")
Overall_gene_density
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) + xlab("Total Genes Present") + geom_density() + ylab("Kernal Density")
Overall_gene_density
#gauging overall desnity. Showing how the dataset is bimodel
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) + xlab("Total Genes Present") + geom_density() + ylab("Kernal Density") + geom_vline(aes (xintercept = mean(Organisms$total.genes.present)))
Overall_gene_density
#gauging overall desnity. Showing how the dataset is bimodel
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) +
xlab("Total Genes Present") +
geom_density() + ylab("Kernal Density") +
geom_vline(aes (xintercept = mean(Organisms$total.genes.present)),
colors = "blue", linetype = "dashed", size = 1)
#gauging overall desnity. Showing how the dataset is bimodel
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) +
xlab("Total Genes Present") +
geom_density() + ylab("Kernal Density") +
geom_vline(aes (xintercept = mean(Organisms$total.genes.present)),
colours = "blue", linetype = "dashed", size = 1)
#gauging overall desnity. Showing how the dataset is bimodel
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) +
xlab("Total Genes Present") +
geom_density() + ylab("Kernal Density") +
geom_vline(aes (xintercept = mean(Organisms$total.genes.present)),
colours = "blue", linetype = "dashed", size = 1)
#gauging overall desnity. Showing how the dataset is bimodel
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) +
xlab("Total Genes Present") +
geom_density() + ylab("Kernal Density") +
geom_vline(aes (xintercept = mean(Organisms$total.genes.present)),
colors = "blue", linetype = "dashed", size = 1)
#gauging overall desnity. Showing how the dataset is bimodel
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) +
xlab("Total Genes Present") +
geom_density() + ylab("Kernal Density") +
geom_vline(aes (xintercept = mean(Organisms$total.genes.present)),
linetype = "dashed", size = 1)
#gauging overall desnity. Showing how the dataset is bimodel
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) +
xlab("Total Genes Present") +
geom_density() + ylab("Kernal Density") +
geom_vline(aes (xintercept = mean(Organisms$total.genes.present)),
linetype = "dashed")
#Gaugeing density based on levels
ggplot(Organisms, aes(x = Organisms$total.genes.present, color = life)) +
geom_density()
#Gaugeing density based on levels
ggplot(Organisms, aes(x = Organisms$total.genes.present, color = life)) +
geom_density()+
xlab("Total Genes Present") + ylab("Density")
#gauging overall desnity. Showing how the dataset is bimodel
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) +
xlab("Total Genes Present") +
geom_density() + ylab("Kernal Density") +
geom_vline(aes (xintercept = mean(Organisms$total.genes.present)),
linetype = "dashed")
Overall_gene_density
#Gaugeing density based on levels
ggplot(Organisms, aes(x = Organisms$total.genes.present, color = life)) +
geom_density()+
xlab("Total Genes Present") + ylab("Density")
#Gaugeing density based on levels
ggplot(Organisms, aes(x = Organisms$total.genes.present, color = life)) +
geom_density(kernal = "gaussian")+
xlab("Total Genes Present") + ylab("Density")
#Gaugeing density based on levels
ggplot(Organisms, aes(x = Organisms$total.genes.present, color = life)) +
geom_density(kernel = "gaussian")+
xlab("Total Genes Present") + ylab("Density")
Vision.Homes <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
View(Vision.Homes)
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
>   View(Data)
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
>   View(Data)
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
>   View(Data)
View(Data)
attach(NormR)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggpubr")
install.packages("ggpubr")
library(dplyr)
library(ggpubr)
Vision.Homes <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", header=FALSE)
View(Vision.Homes)
ggdensity(Data$Total,
main = "Distribution of Leads by month",
xlab = "Month")
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
ggdensity(Data$Total,
main = "Distribution of Leads by month",
xlab = "Month")
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
library(ggpubr)
library("ggpubr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
ggdensity(Data$Total,
main = "Distribution of Leads by month",
xlab = "Month")
ggdensity(Data$Total,
main = "Distribution of Leads by month",
xlab = "Month")
ggdensity(Data$Total,
main = "Distribution of Leads by month",
xlab = "Month")
ggdensity
hist(Data$Total, probability = T)
hist(Data$Total, probability = T), lines(density(normal), col(Data$Total))
hist(Data$Total, probability = T), lines(density(normal))
hist(Data$Total, probability = T), lines(density)
hist(Data$Total, probability = T) lines(density)
lines(density)
lines(density(normal))
hist(Data$Total, probability = T)
lines(density(normal))
lines(density(normal), col= 2)
lines(density(skewed), col= 2)
lines(density(Data$Total))
shapiro.test(Data$Total)
table(Data$Total)
Summary(Data$Total)
boxplot(Data$Total)
sd(Data$Total)
hist(Data$Total, probability = T)
lines(density(Data$Total))
shapiro.test(Data$Total)
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
hist(Data$Transformed.data, probability = T)
lines(density(Data$Total))
shapiro.test(Data$Total)
install.packages(ballgown)
install.packages(c("ade4", "adegenet", "animation", "ape", "apTreeshape", "assertthat", "backports", "bayou", "BB", "betapart", "BH", "bindr", "bindrcpp", "bit", "blob", "bold", "BoSSA", "caper", "caTools", "cladoRcpp", "cli", "cluster", "coda", "colorspace", "crul", "ctv", "cubature", "curl", "data.table", "DBI", "deldir", "dendextend", "denstrip", "deSolve", "devtools", "dfoptim", "digest", "diversitree", "doParallel", "dotCall64", "dplyr", "e1071", "ellipsis", "evaluate", "expands", "expm", "fastcluster", "fitdistrplus", "flexmix", "FNN", "foreach", "fpc", "geiger", "GenSA", "geometry", "geomorph", "geosphere", "ggmap", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "git2r", "gmodels", "gmp", "gplots", "gtable", "gtools", "GUniFrac", "hexbin", "highr", "hitandrun", "HMP", "htmltools", "htmlwidgets", "httpuv", "httr", "hypervolume", "igraph", "ips", "irlba", "iterators", "jaatha", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "lazyeval", "LearnBayes", "lme4", "magic", "mapproj", "maps", "markdown", "markophylo", "matrixStats", "mclust", "MCMCglmm", "mice", "mime", "modeltools", "MPSEM", "msm", "munsell", "mvMORPH", "natserv", "network", "networkDynamic", "NHPoisson", "nlme", "nloptr", "nLTT", "numDeriv", "oai", "openssl", "optimx", "OUwie", "paleotree", "paleoTS", "PCPS", "pegas", "permute", "phangorn", "phyclust", "phylobase", "phyloclim", "PHYLOGR", "phylolm", "phyloTop", "phytools", "picante", "pkgconfig", "pmc", "polynom", "prabclus", "pracma", "progress", "purrr", "quadprog", "quantreg", "R.oo", "R.utils", "R6", "raster", "rasterVis", "rcdd", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rdryad", "rentrez", "reshape", "rexpokit", "rgeos", "rgl", "RgoogleMaps", "ritis", "rJava", "rjson", "rlang", "rmarkdown", "rmetasim", "Rmpfr", "rncl", "RNeXML", "robustbase", "rotl", "rpart.plot", "rphast", "rredlist", "RSQLite", "rstudioapi", "rvest", "Rvmmin", "scales", "scatterplot3d", "segmented", "selectr", "seqinr", "shiny", "solrium", "sourcetools", "sp", "spam", "spData", "spdep", "stringi", "stringr", "subplex", "SYNCSA", "taxize", "tensorA", "tibble", "tidyr", "tkrplot", "treeplyr", "TreeSim", "trimcluster", "urltools", "utf8", "vctrs", "vegan", "VGAM", "viridis", "viridisLite", "whisker", "wikitaxa", "worrms", "XML", "xml2", "xtable", "yaml", "zoo"))
install.packages(c("ade4", "adegenet", "animation", "ape", "apTreeshape", "assertthat", "backports", "bayou", "BB", "betapart", "BH", "bindr", "bindrcpp", "bit", "blob", "bold", "BoSSA", "caper", "caTools", "cladoRcpp", "cli", "cluster", "coda", "colorspace", "crul", "ctv", "cubature", "curl", "data.table", "DBI", "deldir", "dendextend", "denstrip", "deSolve", "devtools", "dfoptim", "digest", "diversitree", "doParallel", "dotCall64", "dplyr", "e1071", "ellipsis", "evaluate", "expands", "expm", "fastcluster", "fitdistrplus", "flexmix", "FNN", "foreach", "fpc", "geiger", "GenSA", "geometry", "geomorph", "geosphere", "ggmap", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "git2r", "gmodels", "gmp", "gplots", "gtable", "gtools", "GUniFrac", "hexbin", "highr", "hitandrun", "HMP", "htmltools", "htmlwidgets", "httpuv", "httr", "hypervolume", "igraph", "ips", "irlba", "iterators", "jaatha", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "lazyeval", "LearnBayes", "lme4", "magic", "mapproj", "maps", "markdown", "markophylo", "matrixStats", "mclust", "MCMCglmm", "mice", "mime", "modeltools", "MPSEM", "msm", "munsell", "mvMORPH", "natserv", "network", "networkDynamic", "NHPoisson", "nlme", "nloptr", "nLTT", "numDeriv", "oai", "openssl", "optimx", "OUwie", "paleotree", "paleoTS", "PCPS", "pegas", "permute", "phangorn", "phyclust", "phylobase", "phyloclim", "PHYLOGR", "phylolm", "phyloTop", "phytools", "picante", "pkgconfig", "pmc", "polynom", "prabclus", "pracma", "progress", "purrr", "quadprog", "quantreg", "R.oo", "R.utils", "R6", "raster", "rasterVis", "rcdd", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rdryad", "rentrez", "reshape", "rexpokit", "rgeos", "rgl", "RgoogleMaps", "ritis", "rJava", "rjson", "rlang", "rmarkdown", "rmetasim", "Rmpfr", "rncl", "RNeXML", "robustbase", "rotl", "rpart.plot", "rphast", "rredlist", "RSQLite", "rstudioapi", "rvest", "Rvmmin", "scales", "scatterplot3d", "segmented", "selectr", "seqinr", "shiny", "solrium", "sourcetools", "sp", "spam", "spData", "spdep", "stringi", "stringr", "subplex", "SYNCSA", "taxize", "tensorA", "tibble", "tidyr", "tkrplot", "treeplyr", "TreeSim", "trimcluster", "urltools", "utf8", "vctrs", "vegan", "VGAM", "viridis", "viridisLite", "whisker", "wikitaxa", "worrms", "XML", "xml2", "xtable", "yaml", "zoo"))
source("http://bioconductor.org/biocLite.R")
library(plyr)
biocLite("ballgown")
install.packages(devtools)
install.packages("devtools")
library("callR")
install.packages("devtools", type = "win.binary")
install_github("vqv/ggbiplot")
library("devtools")
install_github("vqv/ggbiplot")
library("ggbiplot")
library(ggbiplot)
install_github("vqv/ggbiplot")
library("ggbiplot")
install_github("vqv/ggbiplot")
install_github("vqv/ggbiplot")
install.packages("plyr")
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
library("devtools")
library("devtools", lib.loc="~/R/win-library/3.4")
install_github("vqv/ggbiplot")
install.packages("digest")
library("devtools")
install.packages("rlang")
library("devtools")
install.packages("rlang")
install.packages("rlang")
install_github("vqv/ggbiplot")
version
library("devtools")
install.packages("digest")
library("devtools")
install.packages("devtools")
install_github("vqv/ggbiplot")
library("devtools")
install_github("vqv/ggbiplot")
library(ape)
library(phytools)
library(geiger)
library(picante)
setwd("C:/Users/arpol/Not_Bad/R_packages/Craig_R_Script/)
setwd("C:/Users/arpol/Not_Bad/R_packages/Craig_R_Script/)
setwd("C:/Users/arpol/Not_Bad/R_packages/Craig_R_Script/")
tree1<-read.tree("02_tree.tre")
view tree1
View("tree1")
View(tree1)
View(tree1)
tre<-chronos(tree1)
plot(tre)
dat<-read.csv("genes.csv",header=TRUE)
View(dat)
View(dat)
dat
rownames(dat)<-dat$Species
dat<-dat[match(tre$tip.label,rownames(dat)),]
dat
trans<-matrix(c(0,0,0,1,0,0,1,1,0),nrow=3)
trans
postscript('photo_ERmodel.ps')
plotTree (tre, type="phylogram")
photo<-dat$photo
View(dat)
photo
ER<-matrix(c(1,1,1,1),nrow=2)
#analysis
photorec<-ace(photo,tre,type="discrete",model=trans)
trans
#analysis
photorec<-ace(photo,tre,type="discrete",model="trans")
#analysis
photorec<-ace(photo,tre,type="discrete",model=trans)
photo
trans
photorec<-ace(photo,tre,type="discrete",model=trans)
photorec<-ace(photo,tre,type="discrete",model="trans")
model=trans
View(model)
View(model)
remove(model)
photorec<-ace(photo,tre,type="discrete", model=trans)
photo
dat
View(dat)
setwd("C:/Users/arpol/Not_Bad/R_packages/Craig_R_Script/")
library(ape)
library(phytools)
library(geiger)
library(picante)
tree1<-read.tree("02_tree.tre")
tre<-chronos(tree1)
plot(tre)
dat<-read.csv("genes.csv",header=TRUE)
dat
View(dat)
rownames(dat)<-dat$Species
View(dat)
dat<-dat[match(tre$tip.label,rownames(dat)),]
View(dat)
View(tre)
tre[["tip.label"]]
dat<-read.csv("genes.csv",header=TRUE)
rownames(dat)<-dat$Species
View(dat)
rownames(dat)
dat2<-dat[match(tre$tip.label,rownames(dat)),]
View(dat2)
View(tre$tip.label)
View(rownames(dat))
View(rownames(dat2))
dat<-read.csv("genes_2.csv",header=TRUE)
dat<-read.csv("genes_2.csv",header=TRUE)
rownames(dat)<-dat$Species
dat<-dat[match(tre$tip.label,rownames(dat)),]
View(dat)
trans<-matrix(c(0,0,0,1,0,0,1,1,0),nrow=3)
postscript('photo_ERmodel.ps')
plotTree (tre, type="phylogram")
photo<-dat$photo
photorec<-ace(photo,tre,type="discrete",model=trans)
View(photo)
view(trans)
View(trans)
photo<-dat$ndhA
photorec<-ace(photo,tre,type="discrete",model=trans)
photorec
View(photorec)
cols<-setNames(palette()[1:length(unique(photo))],sort(unique(photo)))
View(col())
View(cols)
tiplabels(pie=to.matrix(photo,sort(unique(photo))),piecol=cols,cex=0.3)
nodelabels(node=1:tre$Nnode+Ntip(tre), pie=photorec$lik.anc,piecol=cols,cex=0.5)
dev.off()
dev.off(photo_ERmodel.ps)
dev.off()
photo<-dat$photo
ER<-matrix(c(1,1,1,1),nrow=2)
View(ER)
trans2<-matrix(c(0,0,1,0),nrow=2)
View(trans2)
trans3<-matrix(c(0,0,2,0),nrow=2)
photorec<-ace(photo,tre,type="discrete",model=trans3)
View(photo)
photorER<-ace(photo,tre,type="discrete",model=ER)
photorER
View(photorER)
cols<-setNames(palette()[1:length(unique(photo))],sort(unique(photo)))
tiplabels(pie=to.matrix(photo,sort(unique(photo))),piecol=cols,cex=0.3)
postscript('photo_ERmodel.ps')
tiplabels(pie=to.matrix(photo,sort(unique(photo))),piecol=cols,cex=0.3)
cols<-setNames(palette()[1:length(unique(photo))],sort(unique(photo)))
tiplabels(pie=to.matrix(photo,sort(unique(photo))),piecol=cols,cex=0.3)
plot(tre)
tiplabels(pie=to.matrix(photo,sort(unique(photo))),piecol=cols,cex=0.3)
dev.off()
ls
View(tre)
tre
plot(tre)
tiplabels(pie=to.matrix(photo,sort(unique(photo))),piecol=cols,cex=0.3)
nodelabels(node=1:tre$Nnode+Ntip(tre), pie=photorec$lik.anc,piecol=cols,cex=0.5)
dev.off()
plot(tre)
nodelabels(node=1:tre$Nnode+Ntip(tre), pie=photorec$lik.anc,piecol=cols,cex=0.5)
tiplabels(pie=to.matrix(photo,sort(unique(photo))),piecol=cols,cex=0.3)
tree2<-read.tree("My_data/RAxML_bipartitions.16_s.tree")
View(tree2)
plot(tree2)
tree2<-read.tree("My_data/16s_bipartition.tree")
tree2<-read.tree("My_data/16s_bipartition.tree")
tree2<-read.tree("My_data/16s_bipartition_2.tree")
plot(tree2)
tre1<-chronos(tree2)
plot tre1
plot(tre1)
dat<-read.csv("My_data/Flagella_presents_absence.csv",header=TRUE)
dat
dat<-read.csv("My_data/Flagella_presents_absence_2.csv",header=TRUE)
rownames(dat)<-dat$Species
View(dat)
dat3<-dat[match(tre$tip.label,rownames(dat)),]
View(dat3)
tree2<-read.tree("My_data/16s_bipartition_2.tree")
tre1<-chronos(tree2)
dat<-read.csv("My_data/Flagella_presents_absence_3.csv",header=TRUE)
rownames(dat)<-dat$Species
dat3<-dat[match(tre$tip.label,rownames(dat)),]
View(dat3)
dat<-read.csv("My_data/Flagella_presents_absence_3.csv",header=TRUE)
View(dat)
rownames(dat)<-dat$Species
View(dat)
dat3<-dat[match(tre$tip.label,rownames(dat)),]
tree2<-read.tree("My_data/16s_bipartition_2.tree")
tre1<-chronos(tree2)
dat3<-dat[match(tre$tip.label,rownames(dat)),]
View(dat3)
plot(tre1)
dat3<-dat[match(tre1$tip.label,rownames(dat)),]
View(dat3)
tree2<-read.tree("My_data/16s_bipartition_2.tree")
tre1<-chronos(tree2)
plot(tre1)
tree2<-read.tree("My_data/16s_bipartition_2.tree")
plot(tree2
)
dat<-read.csv("My_data/Flagella_presents_absence_3.csv",header=TRUE)
rownames(dat)<-dat$Species
dat3<-dat[match(tre1$tip.label,rownames(dat)),]
View(dat3)
postscript('photo_ERmodel.ps')
postscript('fliE_ERmodel.ps')
plotTree (tre1, type="phylogram")
flie<-dat3$FliE
FliErec<-ace(flie,tre1,type="discrete",model=trans)
View(flie)
FliErec<-ace(flie,tre1,type="discrete",model=trans)
FliErec<-ace(flie,tre1,type="discrete",model=trans1)
trans<-matrix(c(0,0,0,1,0,0,1,1,0),nrow=3)
flie<-dat3$FliE
FliErec<-ace(flie,tre1,type="discrete",model=trans1)
FliErec<-ace(flie,tre1,type="discrete",model=trans)
View(trans)
photorec<-ace(dat,tre,type="discrete",model=trans)
dat<-read.csv("genes_2.csv",header=TRUE)
rownames(dat)<-dat$Species
dat<-dat[match(tre$tip.label,rownames(dat)),]
trans<-matrix(c(0,0,0,1,0,0,1,1,0),nrow=3)
postscript('photo_ERmodel.ps')
plotTree (tre, type="phylogram")
photo<-dat$photo
photorec<-ace(photo,tre,type="discrete",model=trans)
photorec<-ace(dat,tre,type="discrete",model=trans)
View(dat)
