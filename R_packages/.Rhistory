xlab("Total Genes Present") +
geom_density() + ylab("Kernal Density") +
geom_vline(aes (xintercept = mean(Organisms$total.genes.present)),
linetype = "dashed", size = 1)
#gauging overall desnity. Showing how the dataset is bimodel
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) +
xlab("Total Genes Present") +
geom_density() + ylab("Kernal Density") +
geom_vline(aes (xintercept = mean(Organisms$total.genes.present)),
linetype = "dashed")
#Gaugeing density based on levels
ggplot(Organisms, aes(x = Organisms$total.genes.present, color = life)) +
geom_density()
#Gaugeing density based on levels
ggplot(Organisms, aes(x = Organisms$total.genes.present, color = life)) +
geom_density()+
xlab("Total Genes Present") + ylab("Density")
#gauging overall desnity. Showing how the dataset is bimodel
Overall_gene_density <- ggplot(Organisms, aes(x = Organisms$total.genes.present)) +
xlab("Total Genes Present") +
geom_density() + ylab("Kernal Density") +
geom_vline(aes (xintercept = mean(Organisms$total.genes.present)),
linetype = "dashed")
Overall_gene_density
#Gaugeing density based on levels
ggplot(Organisms, aes(x = Organisms$total.genes.present, color = life)) +
geom_density()+
xlab("Total Genes Present") + ylab("Density")
#Gaugeing density based on levels
ggplot(Organisms, aes(x = Organisms$total.genes.present, color = life)) +
geom_density(kernal = "gaussian")+
xlab("Total Genes Present") + ylab("Density")
#Gaugeing density based on levels
ggplot(Organisms, aes(x = Organisms$total.genes.present, color = life)) +
geom_density(kernel = "gaussian")+
xlab("Total Genes Present") + ylab("Density")
Vision.Homes <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
View(Vision.Homes)
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
>   View(Data)
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
>   View(Data)
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
>   View(Data)
View(Data)
attach(NormR)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggpubr")
install.packages("ggpubr")
library(dplyr)
library(ggpubr)
Vision.Homes <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", header=FALSE)
View(Vision.Homes)
ggdensity(Data$Total,
main = "Distribution of Leads by month",
xlab = "Month")
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
ggdensity(Data$Total,
main = "Distribution of Leads by month",
xlab = "Month")
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
library(ggpubr)
library("ggpubr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
ggdensity(Data$Total,
main = "Distribution of Leads by month",
xlab = "Month")
ggdensity(Data$Total,
main = "Distribution of Leads by month",
xlab = "Month")
ggdensity(Data$Total,
main = "Distribution of Leads by month",
xlab = "Month")
ggdensity
hist(Data$Total, probability = T)
hist(Data$Total, probability = T), lines(density(normal), col(Data$Total))
hist(Data$Total, probability = T), lines(density(normal))
hist(Data$Total, probability = T), lines(density)
hist(Data$Total, probability = T) lines(density)
lines(density)
lines(density(normal))
hist(Data$Total, probability = T)
lines(density(normal))
lines(density(normal), col= 2)
lines(density(skewed), col= 2)
lines(density(Data$Total))
shapiro.test(Data$Total)
table(Data$Total)
Summary(Data$Total)
boxplot(Data$Total)
sd(Data$Total)
hist(Data$Total, probability = T)
lines(density(Data$Total))
shapiro.test(Data$Total)
Data <- read.csv("C:/Users/arpol/Downloads/Vision Homes.csv", row.names=1)
hist(Data$Transformed.data, probability = T)
lines(density(Data$Total))
shapiro.test(Data$Total)
install.packages(ballgown)
install.packages(c("ade4", "adegenet", "animation", "ape", "apTreeshape", "assertthat", "backports", "bayou", "BB", "betapart", "BH", "bindr", "bindrcpp", "bit", "blob", "bold", "BoSSA", "caper", "caTools", "cladoRcpp", "cli", "cluster", "coda", "colorspace", "crul", "ctv", "cubature", "curl", "data.table", "DBI", "deldir", "dendextend", "denstrip", "deSolve", "devtools", "dfoptim", "digest", "diversitree", "doParallel", "dotCall64", "dplyr", "e1071", "ellipsis", "evaluate", "expands", "expm", "fastcluster", "fitdistrplus", "flexmix", "FNN", "foreach", "fpc", "geiger", "GenSA", "geometry", "geomorph", "geosphere", "ggmap", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "git2r", "gmodels", "gmp", "gplots", "gtable", "gtools", "GUniFrac", "hexbin", "highr", "hitandrun", "HMP", "htmltools", "htmlwidgets", "httpuv", "httr", "hypervolume", "igraph", "ips", "irlba", "iterators", "jaatha", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "lazyeval", "LearnBayes", "lme4", "magic", "mapproj", "maps", "markdown", "markophylo", "matrixStats", "mclust", "MCMCglmm", "mice", "mime", "modeltools", "MPSEM", "msm", "munsell", "mvMORPH", "natserv", "network", "networkDynamic", "NHPoisson", "nlme", "nloptr", "nLTT", "numDeriv", "oai", "openssl", "optimx", "OUwie", "paleotree", "paleoTS", "PCPS", "pegas", "permute", "phangorn", "phyclust", "phylobase", "phyloclim", "PHYLOGR", "phylolm", "phyloTop", "phytools", "picante", "pkgconfig", "pmc", "polynom", "prabclus", "pracma", "progress", "purrr", "quadprog", "quantreg", "R.oo", "R.utils", "R6", "raster", "rasterVis", "rcdd", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rdryad", "rentrez", "reshape", "rexpokit", "rgeos", "rgl", "RgoogleMaps", "ritis", "rJava", "rjson", "rlang", "rmarkdown", "rmetasim", "Rmpfr", "rncl", "RNeXML", "robustbase", "rotl", "rpart.plot", "rphast", "rredlist", "RSQLite", "rstudioapi", "rvest", "Rvmmin", "scales", "scatterplot3d", "segmented", "selectr", "seqinr", "shiny", "solrium", "sourcetools", "sp", "spam", "spData", "spdep", "stringi", "stringr", "subplex", "SYNCSA", "taxize", "tensorA", "tibble", "tidyr", "tkrplot", "treeplyr", "TreeSim", "trimcluster", "urltools", "utf8", "vctrs", "vegan", "VGAM", "viridis", "viridisLite", "whisker", "wikitaxa", "worrms", "XML", "xml2", "xtable", "yaml", "zoo"))
install.packages(c("ade4", "adegenet", "animation", "ape", "apTreeshape", "assertthat", "backports", "bayou", "BB", "betapart", "BH", "bindr", "bindrcpp", "bit", "blob", "bold", "BoSSA", "caper", "caTools", "cladoRcpp", "cli", "cluster", "coda", "colorspace", "crul", "ctv", "cubature", "curl", "data.table", "DBI", "deldir", "dendextend", "denstrip", "deSolve", "devtools", "dfoptim", "digest", "diversitree", "doParallel", "dotCall64", "dplyr", "e1071", "ellipsis", "evaluate", "expands", "expm", "fastcluster", "fitdistrplus", "flexmix", "FNN", "foreach", "fpc", "geiger", "GenSA", "geometry", "geomorph", "geosphere", "ggmap", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "git2r", "gmodels", "gmp", "gplots", "gtable", "gtools", "GUniFrac", "hexbin", "highr", "hitandrun", "HMP", "htmltools", "htmlwidgets", "httpuv", "httr", "hypervolume", "igraph", "ips", "irlba", "iterators", "jaatha", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "lazyeval", "LearnBayes", "lme4", "magic", "mapproj", "maps", "markdown", "markophylo", "matrixStats", "mclust", "MCMCglmm", "mice", "mime", "modeltools", "MPSEM", "msm", "munsell", "mvMORPH", "natserv", "network", "networkDynamic", "NHPoisson", "nlme", "nloptr", "nLTT", "numDeriv", "oai", "openssl", "optimx", "OUwie", "paleotree", "paleoTS", "PCPS", "pegas", "permute", "phangorn", "phyclust", "phylobase", "phyloclim", "PHYLOGR", "phylolm", "phyloTop", "phytools", "picante", "pkgconfig", "pmc", "polynom", "prabclus", "pracma", "progress", "purrr", "quadprog", "quantreg", "R.oo", "R.utils", "R6", "raster", "rasterVis", "rcdd", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rdryad", "rentrez", "reshape", "rexpokit", "rgeos", "rgl", "RgoogleMaps", "ritis", "rJava", "rjson", "rlang", "rmarkdown", "rmetasim", "Rmpfr", "rncl", "RNeXML", "robustbase", "rotl", "rpart.plot", "rphast", "rredlist", "RSQLite", "rstudioapi", "rvest", "Rvmmin", "scales", "scatterplot3d", "segmented", "selectr", "seqinr", "shiny", "solrium", "sourcetools", "sp", "spam", "spData", "spdep", "stringi", "stringr", "subplex", "SYNCSA", "taxize", "tensorA", "tibble", "tidyr", "tkrplot", "treeplyr", "TreeSim", "trimcluster", "urltools", "utf8", "vctrs", "vegan", "VGAM", "viridis", "viridisLite", "whisker", "wikitaxa", "worrms", "XML", "xml2", "xtable", "yaml", "zoo"))
source("http://bioconductor.org/biocLite.R")
library(plyr)
biocLite("ballgown")
install.packages(devtools)
install.packages("devtools")
library("callR")
install.packages("devtools", type = "win.binary")
install_github("vqv/ggbiplot")
library("devtools")
install_github("vqv/ggbiplot")
library("ggbiplot")
library(ggbiplot)
install_github("vqv/ggbiplot")
library("ggbiplot")
install_github("vqv/ggbiplot")
install_github("vqv/ggbiplot")
install.packages("plyr")
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
library("devtools")
library("devtools", lib.loc="~/R/win-library/3.4")
install_github("vqv/ggbiplot")
install.packages("digest")
library("devtools")
install.packages("rlang")
library("devtools")
install.packages("rlang")
install.packages("rlang")
install_github("vqv/ggbiplot")
version
library("devtools")
install.packages("digest")
library("devtools")
install.packages("devtools")
install_github("vqv/ggbiplot")
library("devtools")
install_github("vqv/ggbiplot")
library(ballgown)
library("ballgown")
library("ballgown", lib.loc="~/R/win-library/3.4")
>library(ballgown)
>library(RSkittleBrewer)
library(ballgown)
library(RSkittleBrewer)
library(genefilter)
library(dplyr)
library(devtools)
install.packages(rlang)
install.packages("rlang")
library(ballgown)
install.packages("blob")
library(ballgown)
install.packages("ballgrown", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(ballgown)
library(ballgown)
version
install.packages("ballgrown", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(ballgown)
updater()
install.packages(installr)
install.packages("installr")
library(installr)
updater()
version
setwd("C:/Users/arpol/Not_Bad/R_packages/")
library(vctrs)
library(ballgown)
install.packages("vctrs")
library(vctrs)
library(ballgown)
library(RSkittleBrewer)
library(genefilter)
library(dplyr)
library(devtools)
#read in the folder names with the read data
pheno_data = read.csv("run_data.csv")
bg_chrX=ballgown(dataDir="ballgown", samplePattern = "hcc", meas='all')
bg_chrX=ballgown(dataDir="ballgown", samplePattern = "ane", meas='all')
$sampleNames(bg_chrX)
sampleNames(bg_chrX)
pData(bg)=data.frame(id=sampleNames(bg))
pData(bg_chrX)=data.frame(id=sampleNames(bg_chrX))
View(pData(bg_chrX))
pData(bg_chrX)= data.frame(dir("class_work/run_data.csv"))
View(pData(bg_chrX))
pData(bg_chrX)= data.frame("class_work/run_data.csv")
pData(bg_chrX)= data.frame("class_work/run_data.csv")
View(pData(bg_chrX))
pData(bg_chrX)= "class_work/run_data.csv"
View(pData(bg_chrX))
pData(bg)=data.frame(id=sampleNames(bg_chrX), group=rep(c("female","male"), each=(8:4)))
View(pData(bg_chrX))
pData(bg)=data.frame(id=sampleNames(bg_chrX), group=rep(c("female","male")))
#read in the folder names with the read data
pheno_data = read.csv("run_data.csv")
#read in the folder names with the read data
pheno_data = read.csv("class_work//run_data.csv")
#read in the folder names with the read data
pheno_data = read.csv("class_work/run_data.csv")
pData(bg)=pheno_data
pData(bg_chrX)=pheno_data
View(pData(bg_chrX))
tx_table = texpr(bg_chrX,  "all")
fpkm = texpr(bg,meas="FPKM")
source('C:/Users/arpol/wvu_gda/additional_R_help/R_images/R_script.R', echo=TRUE)
fpkm = texpr(bg_chrX,meas="FPKM")
View(tx_table)
#extract transcript with both coverage and fpkm
Whole_bg_chrx=texpr(bg_chrX,'all')
##Extract expression (expr) values (as FPKM) for  genes (g).
gene_expression = gexpr(bg_chrX)
#extract expression for genes in fpkm and coverage
gene_bg_chrx=gexpr(bg_chrX)
#differentially expressed transcripts
det = stattest(bg, feature="transcript", covariate="group", getFC=TRUE, meas="FPKM")
#differentially expressed transcripts
det = stattest(bg_chrX, feature="transcript", covariate="sex", getFC=TRUE, meas="FPKM")
#store mapping between transcripts and genes
transcript_gene_table=indexes(bg_chrX)$t2g
#check the unique number of genes in the transcript/genes table
length(unique(transcript_gene_table[,"g_id"]))
#how many transcripts are there per gene? count the number of genes and count the number of transcripts pere gene and plot it.
counts=table(transcript_gene_table[,"g_id"])
#makes chart that summarizes the data
c_one = length(which(counts == 1))
c_more_than_one = length(which(counts > 1))
c_max = max(counts)
hist(counts, breaks=50, col="bisque4", xlab="Transcripts per gene", main="Distribution of transcript count per gene")
legend_text = c(paste("Genes with one transcript =", c_one), paste("Genes with more than one transcript =", c_more_than_one), paste("Max transcripts for single gene = ", c_max))
legend("topright", legend_text)
trans_expression=texpr(bg_chrX)
View(trans_expression)
#extract gene names and transcript names
gene_names=data.frame(SYMBOL=unique(rownames(Whole_bg_chrx)))
View(gene_names)
View(Whole_bg_chrx)
## create sample meta data frame
phenotype_table= data.frame(id=t_name(bg_chrX), group=rep(c("Female","Male"), each=3))
#extract gene names and transcript names
gene_names=data.frame(SYMBOL=unique(t_name(Whole_bg_chrx)))
#extract gene names and transcript names
gene_names=data.frame(SYMBOL=unique(rownames(Whole_bg_chrx$t_id)))
View(gene_names)
hist(counts, breaks=50, col="bisque4", xlab="Transcripts per gene", main="Distribution of transcript count per gene")
legend_text = c(paste("Genes with one transcript =", c_one), paste("Genes with more than one transcript =", c_more_than_one), paste("Max transcripts for single gene = ", c_max))
legend("topright", legend_text)
## differential transcript expression
results_txns = stattest(bg_chrX, feature='transcript', getFC = T, covariate='sex',meas='FPKM' )
#add names and IDs
t.ids=Whole_bg_chrx[,c(1,6)]
t_names=unique(Whole_bg_chrx[,c(1,6)])
results_txns_merged = merge(results_txns,t.ids,by.x=c("id"),by.y=c("t_id"))
head(results_txns_merged)
# Calculate differentially expressed genes and use FPKM in calculating # # # # differential gene expression
results_genes = stattest(bg_chrX, feature="transcript", covariate="sex", getFC=TRUE, meas="FPKM")
## Compare the data before and after normalization. boxplot with and without log transformation
par(mfrow=c(1,2))
boxplot(gene_expression, col=rainbow(6),  las=2, ylab="log2(FPKM)", main="Distribution of FPKMs for all 6 samples")
boxplot(log2(gene_expression+1), col= Beach,  las=2, ylab="log2(FPKM)", main="log transformed distribution of FPKMs for all 6 samples")
## Compare the data before and after normalization. boxplot with and without log transformation
par(mfrow=c(1,2))
boxplot(results_genes, col=rainbow(6),  las=2, ylab="log2(FPKM)", main="Distribution of FPKMs for all 6 samples")
boxplot(log2(results_genes+1), col= Beach,  las=2, ylab="log2(FPKM)", main="log transformed distribution of FPKMs for all 6 samples")
boxplot(trans_expression, col=rainbow(6),  las=2, ylab="log2(FPKM)", main="Distribution of FPKMs for all 6 samples")
boxplot(log2(trans_expression+1), col= Beach,  las=2, ylab="log2(FPKM)", main="log transformed distribution of FPKMs for all 6 samples")
boxplot(log2(trans_expression+1), col= rainbow(12),  las=2, ylab="log2(FPKM)", main="log transformed distribution of FPKMs for all 6 samples")
## FPKM values are not logged. Hence fold change (FC) is not also logged. Log # fold changes and store it in logfc columnresults_genes[,"logfc"] = log2(results_genes[,"fc"])
results_genes[,"logfc"] = log2(results_genes[,"fc"])
# Identify the genes (rows) with adjusted p-value (i.eq-value) < 0.05
qsig=which(results_genes$qval<0.05)
# draw histogram
hist(results_genes[qsig,"logfc"], breaks=50, col="seagreen", xlab="log2(Fold change) male vs female", main="Distribution of differential expression values")
abline(v=c(-2,2), col="black", lwd=2, lty=2)
legend("topright", "Fold change >2 and <-2", lwd=2, lty=2)
# Convert the matrix to data
gene_expression=as.data.frame(tran_expression)
# Convert the matrix to data
gene_expression=as.data.frame(trans_expression)
write.table(gene_expression, "gene_expression.txt", sep="\t")
##Extract expression (expr) values (as FPKM) for  genes (g).
gene_expression = gexpr(bg_chrX)
View(gene_expression)
View(Whole_bg_chrx)
View(results_txns_merged)
# Convert the matrix to data
gene_expression=as.data.frame(Whole_bg_chrx)
write.table(gene_expression, "gene_expression.txt", sep="\t")
View(gene_expression)
gene_expression=subset(gene_expression, select = -c(1:5))
View(gene_expression)
gene_expression=row.names(gene_expression$t_name)
View(gene_expression)
# Convert the matrix to data
gene_expression=as.data.frame(Whole_bg_chrx)
gene_expression=subset(gene_expression, select = -c(1:5))
write.table(gene_expression, "gene_expression.txt", sep="\t")
View(gene_expression)
gene_expression$female=rowMeans(gene_expression[, c(5:21)])
gene_expression$female=rowMeans(gene_expression[, c(6:22)])
View(gene_expression)
coverage = texpr(bg_chrX,meas = "cov")
View(fpkm)
# Convert the matrix to data
gene_expression=as.data.frame(Whole_bg_chrx)
gene_expression=subset(gene_expression, select = -c(1:5))
gene_expression=subset(gene_expression, select = -"cov)"
)
fpkm=texpr(bg_chrX, meas = "FPKM", meas = "t_name")
View(gene_expression)
gene_expression=subset(gene_expression, select = -c(6))
View(gene_expression)
gene_expression=subset(gene_expression, select = -c(7))
gene_expression=subset(gene_expression, select = -c(8))
gene_expression=subset(gene_expression, select = -c(9))
gene_expression=subset(gene_expression, select = -c(10))
gene_expression=subset(gene_expression, select = -c(11))
gene_expression=subset(gene_expression, select = -c(12))
gene_expression=subset(gene_expression, select = -c(13))
gene_expression=subset(gene_expression, select = -c(14))
gene_expression=subset(gene_expression, select = -c(15))
gene_expression=subset(gene_expression, select = -c(16))
gene_expression=subset(gene_expression, select = -c(17))
View(gene_expression)
trans_expression = row.names(gene_expression)<gene_expression$t_name
View(trans_expression)
View(gene_expression)
gene_expression_1 = gene_expression
row.names(gene_expression_1) <- gene_expression_1$t_name
View(gene_expression_1)
row.names(gene_expression) <- gene_expression$t_name
gene_expression=subset(gene_expression, select =-c(1))
View(gene_expression)
trans_expression = subset(gene_expression,select=-c(1:4))
View(trans_expression)
View(gene_names)
#extract gene names and transcript names
gene_names=data.frame(SYMBOL=unique(rownames(Whole_bg_chrx$t_id)))
View(gene_names)
#extract gene names and transcript names
gene_names=data.frame(SYMBOL=unique(rownames(trans_expression)))
View(gene_names)
boxplot(trans_expression, col=rainbow(6),  las=2, ylab="log2(FPKM)", main="Distribution of FPKMs for all 6 samples")
boxplot(log2(trans_expression+1), col= rainbow(12),  las=2, ylab="log2(FPKM)", main="log transformed distribution of FPKMs for all 6 samples")
View(results_genes)
# Calculate differentially expressed genes and use FPKM in calculating # # # # differential gene expression
results_genes = stattest(bg_chrX, feature="t_name", covariate="sex", getFC=TRUE, meas="FPKM")
# Convert the matrix to data
write.table(trans_expression, "gene_expression.txt", sep="\t")
trans_expression$female=rowMeans(gene_expression[, c(1:8)])
trans_expression$female=rowMeans(trans_expression[, c(1:8)])
trans_expression$male=rowMeans(trans_expression[,c(9:12)])
#to avoid 0
x=log2(trans_expression[,"female"]+1)
y=log2(trans_expression[,"male"]+1)
plot(x=x, y=y, pch=1, cex=2, xlab="Female FPKM (log2)", ylab="Male (log2)", main="Male vs Female FPKMs")
abline(a=0, b=1)
xqsig=x[qsig]
yqsig=y[qsig]
points(x=xqsig, y=yqsig, col="green", pch=19, cex=2)
fsig=which(abs(results_genes$logfc)>4)
xfsig=x[fsig]
yfsig=y[fsig]
points(x=xfsig, y=yfsig, col="red", pch=1, cex=2)
legend_text = c("Significant by Q value", "Significant by Fold change")
legend("topright", legend_text,bty="n",pch = c(19,19), col=c("green","red"))
# label the significant genes
textxy(xfsig,yfsig, cex=0.8, labs=row.names(trans_expression[fsig,]))
# label the significant genes
library(calibrate)
textxy(xfsig,yfsig, cex=0.8, labs=row.names(trans_expression[fsig,]))
# add red line through 0
abline(v=0, col="red", lwd=3)
# add red line through fold change 4 (log2,2)
abline(v=c(4,-4), col="red", lwd=3)
abline(h=c(-4,4), col="red",lwd=3)
View(results_genes)
## FPKM values are not logged. Hence fold change (FC) is not also logged. Log # fold changes and store it in logfc columnresults_genes[,"logfc"] = log2(results_genes[,"fc"])
results_txns_merged[,"logfc"] = log2(results_txns_merged[,"fc"])
# Identify the genes (rows) with adjusted p-value (i.eq-value) < 0.05
qsig=which(results_txns_merged$qval<0.05)
# draw histogram
hist(results_txns_merged[qsig,"logfc"], breaks=50, col="seagreen", xlab="log2(Fold change) male vs female", main="Distribution of differential expression values")
abline(v=c(-2,2), col="black", lwd=2, lty=2)
legend("topright", "Fold change >2 and <-2", lwd=2, lty=2)
fsig=which(abs(results_txns_merged$logfc)>4)
xfsig=x[fsig]
yfsig=y[fsig]
points(x=xfsig, y=yfsig, col="red", pch=1, cex=2)
legend_text = c("Significant by Q value", "Significant by Fold change")
legend("topright", legend_text,bty="n",pch = c(19,19), col=c("green","red"))
plot(x=x, y=y, pch=1, cex=2, xlab="Female FPKM (log2)", ylab="Male (log2)", main="Male vs Female FPKMs")
abline(a=0, b=1)
xqsig=x[qsig]
yqsig=y[qsig]
points(x=xqsig, y=yqsig, col="green", pch=19, cex=2)
fsig=which(abs(results_txns_merged$logfc)>4)
xfsig=x[fsig]
yfsig=y[fsig]
points(x=xfsig, y=yfsig, col="red", pch=1, cex=2)
legend_text = c("Significant by Q value", "Significant by Fold change")
legend("topright", legend_text,bty="n",pch = c(19,19), col=c("green","red"))
# label the significant genes
library(calibrate)
textxy(xfsig,yfsig, cex=0.8, labs=row.names(trans_expression[fsig,]))
# add red line through 0
abline(v=0, col="red", lwd=3)
# add red line through fold change 4 (log2,2)
abline(v=c(4,-4), col="red", lwd=3)
abline(h=c(-4,4), col="red",lwd=3)
#volcano plot
# Filter genes by log fold change by 16 fold
fc_sig_results_genes=which(abs(results_txns_merged$logfc)>4)
fc_sig_results_genes_plot=results_genes[fc_sig_results_genes,]
plot(results_genes$logfc,results_genes$qval, col="steelblue", pch=1)
#abline
abline(v=c(2,-2), col="red", lwd=3)
abline(h=0.05, col="red",lwd=3)
# highlight the genes with color
points(fc_sig_results_genes_plot$logfc,fc_sig_results_genes_plot$qval, col="green", pch=16)
# label the significant genes
textxy(fc_sig_results_genes_plot$logfc,fc_sig_results_genes_plot$qval, labs=fc_sig_results_genes_plot$id, cex=1.2)
colors = colorRampPalette(c("white", "blue","red","green","yellow"))
par(mfrow=c(1,2))
plot(x,y)
smoothScatter(x,y, colramp = colors)
# Identify the genes (rows) below p-value 0.05
sigpi = which(results_txns_merged[,"pval"]<0.05)
# Extract p-significant genes in a separate object
sigp = results_txns_merged[sigpi,]
sigde = which(abs(sigp[,"logfc"]) >= 2)
# Extract and store the statistically significant genes (rows) that are upregulated/ downregulated by 4 fold
sig_tn_de = sigp[sigde,]
# Order by q value, followed by differential expression
sorted_sig_tn_de = order(sig_tn_de[,"qval"], -abs(sig_tn_de[,"logfc"]), decreasing=FALSE)
output = sig_tn_de[sorted_sig_tn_de,c("id","fc","pval","qval","logfc")]
write.table(output, file="ballgown/SigDE.txt", sep="\t", row.names=FALSE, quote=FALSE)
sig_gene_expression=gene_expression[rownames(trans_expression) %in% sig_tn_de$id,]
View(trans_expression)
#remove female and male columns
sig_gene_expression=sig_gene_expression[,-c(13:14)]
# for pheatmap function, column names and row names of data and pdata mush be identical# change the row names
rownames(pheno_data)=pheno_data[,1]
# remove the id column
phenotype_table=subset(pheno_data, select = -c(id) )
# remove the id column
phenotype_table=subset(pheno_data, select = -c(ids))
# change the colnames to match with the sample names
colnames(sig_gene_expression)=row.names(pheno_data)
library(pheatmap)
pheatmap(as.matrix(sig_gene_expression), scale = "row", clustering_distance_rows = "correlation", clustering_method = "complete",annotation_col = pheno_data , main="Significant genes",fontsize_col=14, fontsize_row = 6 ,color = c("green","red"))
# change the colnames to match with the sample names
colnames(trans_expression)=row.names(pheno_data)
sig_gene_expression=trans_expression[rownames(trans_expression) %in% sig_tn_de$id,]
#remove female and male columns
sig_gene_expression=sig_gene_expression[,-c(13:14)]
# for pheatmap function, column names and row names of data and pdata mush be identical# change the row names
rownames(pheno_data)=pheno_data[,1]
# remove the id column
phenotype_table=subset(pheno_data, select = -c(ids))
# change the colnames to match with the sample names
colnames(trans_expression)=row.names(pheno_data)
# change the colnames to match with the sample names
colnames(sig_gene_expression)=row.names(pheno_data)
library(pheatmap)
pheatmap(as.matrix(sig_gene_expression), scale = "row", clustering_distance_rows = "correlation", clustering_method = "complete",annotation_col = pheno_data , main="Significant genes",fontsize_col=14, fontsize_row = 6 ,color = c("green","red"))
View(sig_gene_expression)
view(trans_expression)
View(trans_expression)
View(sig_tn_de)
sig_gene_expression=trans_expression[rownames(trans_expression) %in% sig_tn_de$id,]
View(sig_tn_de)
View(trans_expression)
View(sig_gene_expression)
View(trans_expression)
gene_1 = gexpr(bg_chrX)
View(gene_1)
sig_gene_expression=gene_1[rownames(gene_1) %in% sig_tn_de$id,]
View(sig_gene_expression)
sig_gene_expression=trans_expression[rownames(trans_expression) %in% sig_tn_de$id,]
View(sig_tn_de)
output = sig_tn_de[sorted_sig_tn_de,c("t_name","fc","pval","qval","logfc")]
write.table(output, file="ballgown/SigDE.txt", sep="\t", row.names=FALSE, quote=FALSE)
sig_gene_expression=trans_expression[rownames(trans_expression) %in% sig_tn_de$t_name,]
#remove female and male columns
sig_gene_expression=sig_gene_expression[,-c(13:14)]
# for pheatmap function, column names and row names of data and pdata mush be identical# change the row names
rownames(pheno_data)=pheno_data[,1]
# remove the id column
phenotype_table=subset(pheno_data, select = -c(ids))
# change the colnames to match with the sample names
colnames(sig_gene_expression)=row.names(pheno_data)
library(pheatmap)
pheatmap(as.matrix(sig_gene_expression), scale = "row", clustering_distance_rows = "correlation", clustering_method = "complete",annotation_col = pheno_data , main="Significant genes",fontsize_col=14, fontsize_row = 6 ,color = c("green","red"))
#PcA plot
pca_data=prcomp(t(sig_gene_expression))
# Calculate PCA component percentages
pca_data_perc=round(100*pca_data$sdev^2/sum(pca_data$sdev^2),1)
df_pca_data = data.frame(PC1 = pca_data$x[,1], PC2 = pca_data$x[,2], sample = colnames(sig_gene_expression), condition = rep(c("Male","Female")))
library(ggplot2)
library(ggrepel)
ggplot(df_pca_data, aes(PC1,PC2, color = sample))+
geom_point(size=8)+
labs(x=paste0("PC1 (",pca_data_perc[1],")"), y=paste0("PC2 (",pca_data_perc[2],")"))
ggplot(df_pca_data, aes(PC1,PC2, color = condition))+
geom_point(size=8)+
labs(x=paste0("PC1 (",pca_data_perc[1],")"), y=paste0("PC2 (",pca_data_perc[2],")"))+
geom_text_repel(aes(label=sample),point.padding = 0.75)
